import triangles ./leg/foot;

static parameter float legRadius;
static parameter float legPartLength;
static parameter color legColor;

static parameter color nailColor;

dynamic parameter float kneeAngle;
dynamic parameter float footAngle;

Vertex topLeft;
topLeft.position = (-1.0 * legRadius, 0.0);
topLeft.color = legColor;

Vertex topRight;
topRight.position = (legRadius, 0.0);
topRight.color = legColor;

Vertex midLeft;
midLeft.position = (-1.0 * legRadius, -1.0 * legPartLength);
midLeft.color = legColor;

Vertex midRight;
midRight.position = (legRadius, -1.0 * legPartLength);
midRight.color = legColor;

matrix midMatrix = dynamic Matrix<float legPartLength> {
	Matrix midMatrix;
	translate(midMatrix, 0.0, -1.0 * legPartLength);
	rotate(midMatrix, kneeAngle);
	outputValue(midMatrix);
};

Vertex bottomLeft;
bottomLeft.position = midLeft.position;
bottomLeft.color = legColor;
bottomLeft.matrix = midMatrix;

Vertex bottomRight;
bottomRight.position = midRight.position;
bottomRight.color = legColor;
bottomRight.matrix = midMatrix;

matrix footMatrix = dynamic Matrix<float legPartLength, float legRadius> {
	Matrix footMatrix;
	translate(footMatrix, 0.0, -1.0 * legPartLength);
	rotate(footMatrix, kneeAngle);
	translate(footMatrix, 0.0, -1.06 * legPartLength);
	rotate(footMatrix, footAngle);
	scale(footMatrix, 10.0 * legRadius, 10.0 * legRadius);
	outputValue(footMatrix);
};

produceTriangle(midLeft, midRight, topRight);
produceTriangle(midLeft, topRight, topLeft);
produceTriangle(bottomLeft, bottomRight, midRight);
produceTriangle(bottomLeft, midRight, midLeft);

for (0 <= index < foot.size) {
	Vertex footVertex = foot[index];
	footVertex.color = legColor;
	footVertex.matrix = footMatrix;
}

for (0 <= triangleIndex < foot.size / 3) {
	int index = triangleIndex * 3;
	produceTriangle(foot[index], foot[index + 1], foot[index + 2]);
}
